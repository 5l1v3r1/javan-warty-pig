group 'javan-warty-pig'
version '0.1.0'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.2'
    }
}

allprojects {
    apply plugin: 'java'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    repositories {
        mavenCentral()
    }
    javadoc {
        options.links 'https://docs.oracle.com/javase/8/docs/api/'
        // TODO: change when https://github.com/gradle/gradle/issues/2354 is fixed
        options.addStringOption 'Xdoclint:all', '-Xdoclint:-missing'
    }
    task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
        from javadoc.destinationDir
        classifier = 'javadoc'
    }
    task packageSources(type: Jar, dependsOn: 'classes') {
        from sourceSets.main.allSource
        classifier = 'sources'
    }
    artifacts {
        archives packageJavadoc
        archives packageSources
    }
}

project(':agent') {
    apply plugin: 'com.github.johnrengelman.shadow'
    dependencies {
        compile project(':fuzz')

        testCompile 'junit:junit:4.12'
    }
    build.dependsOn 'shadowJar'
    shadowJar {
        relocate 'org.objectweb.asm', 'jwp.agent.shade.org.objectweb.asm'
        baseName = 'jwp-agent'
        classifier = null
        version = null
        manifest {
            attributes 'Premain-Class': 'jwp.agent.AgentBootstrap'
            attributes 'Can-Redefine-Classes': 'true'
            attributes 'Can-Retransform-Classes': 'true'
        }
    }
    test {
        dependsOn 'shadowJar'
        jvmArgs '-javaagent:build/libs/jwp-agent.jar'
        outputs.upToDateWhen { false }
        testLogging.showStandardStreams = true
    }
}

project(':fuzz') {
    dependencies {
        compile 'org.ow2.asm:asm:6.0'
        compile 'org.ow2.asm:asm-commons:6.0'
        compile 'org.ow2.asm:asm-util:6.0'

        // Optional
        compileOnly 'com.squareup:javapoet:1.9.0'

        testCompile 'junit:junit:4.12'
    }
    test {
        outputs.upToDateWhen { false }
        testLogging.showStandardStreams = true
    }
}

project(':extras') {
    dependencies {
        compile 'com.squareup:javapoet:1.9.0'

        // Compile only because these classes come via the agent
        compileOnly project(':agent')

        testCompile 'junit:junit:4.12'
    }
    test {
        outputs.upToDateWhen { false }
        testLogging.showStandardStreams = true
    }
}

project(':examples') {
    subprojects {
        apply plugin: 'application'
        run.systemProperties System.properties.findAll { it.key.startsWith("jwp.") }
        run.dependsOn ':agent:shadowJar'
        dependencies {
            compileOnly project(':agent')
        }
    }
}

project(':examples:csv') {
    mainClassName = 'jwp.examples.csv.Main'
    run.jvmArgs '-javaagent:../../agent/build/libs/jwp-agent.jar'
    test.jvmArgs '-javaagent:../../agent/build/libs/jwp-agent.jar'
    run.args 'src/test/java', 'jwp.examples.csv.MainTest'
    configurations {
        externalClasses
        externalSources
    }
    dependencies {
        compile 'com.opencsv:opencsv:4.1'
        compile project(':extras')
        testCompile 'junit:junit:4.12'

    }
    // Need to force UTF-8 due to how we store the test file and that it can have strange chars
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
    test {
        outputs.upToDateWhen { false }
        testLogging {
            afterSuite { desc, result ->
                if (!desc.parent) println("${result.successfulTestCount} of ${result.testCount} tests succeeded")
            }
        }
    }
    // Code coverage stuff with help from https://stackoverflow.com/a/
    apply plugin: 'jacoco'
    dependencies {
        testCompile 'com.opencsv:opencsv:4.1:sources@jar'
        externalClasses 'com.opencsv:opencsv:4.1'
        externalSources 'com.opencsv:opencsv:4.1:sources@jar'
    }
    task unzipExternalClasses(type: Copy) {
        from zipTree(configurations.externalClasses.files.first())
        into "$buildDir/tmp/externalClasses"
    }
    task unzipExternalSources(type: Copy) {
        from zipTree(configurations.externalSources.files.first())
        into "$buildDir/tmp/externalSources"
    }
    jacocoTestReport {
        dependsOn unzipExternalClasses, unzipExternalSources
        reports {
            xml.enabled true
            csv.enabled true
            html.enabled true
            html.destination file("${buildDir}/jacocoHtml")
        }
        additionalSourceDirs = files("$buildDir/tmp/externalSources")
        additionalClassDirs = files("$buildDir/tmp/externalClasses")
    }
}

project(':examples:simple') {
    mainClassName = 'jwp.examples.simple.Main'
    run.jvmArgs '-javaagent:../../agent/build/libs/jwp-agent.jar'
}
